package CS_1_4_5;

import java.util.Stack;

public class CS_1_4_5_1 {
    static Stack<Integer> left = new Stack<>();
    static Stack<Integer> middle = new Stack<>();
    static Stack<Integer> right = new Stack<>();
    static void solveHanoi(int n) {
        for(int i = 0; i < n;i++){
            left.push(i);
        }

        for (int i = 0; i < left.size()-1;i++){
            middle.push(left.peek());
            System.out.println("1 2");
        }
        right.push(left.peek());
        System.out.println("1 3");
        for(int i = 0; i<middle.size();i++){
            right.push(middle.peek());
            System.out.println("2 3");
        }
    }

    public static void main(String[] args) {
        solveHanoi(3);
    }
}
//Игра «Ханойская башня» состоит из трех стопок (левой, средней и правой) и n круглых дисков разного размера.
// Изначально в левом стеке находятся все диски в порядке возрастания размера сверху вниз.
//        Цель — переместить все диски в правый стек, используя средний стек.
//        При каждом ходе вы можете переместить самый верхний диск из стека в другой стек.
//        Кроме того, не допускается размещение диска большего размера на диске меньшего размера.
//        Ваша задача — найти решение, минимизирующее количество ходов.
//        Вход
//        Единственная входная строка содержит целое число n: количество дисков.
//        Выход
//        Сначала выведите целое число k: минимальное количество ходов.
//        После этого выведите k строк с описанием ходов.
//        В каждой строке есть два целых числа a и b: вы перемещаете диск из стека a в стек b.
//        Ограничения
//
//        1 <= n <= 16
//
//        Пример
//        Вход:
//        2
//
//        Выход:
//        3
//        1 2
//        1 3
//        2 3